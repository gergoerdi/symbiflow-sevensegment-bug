/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  CLK // clock
    , input  RX
    , input [3:0] ROWS

      // Outputs
    , output wire  TX
    , output wire [3:0] SS_AN
    , output wire [6:0] SS_SEG
    , output wire  SS_DP
    , output wire [3:0] COLS
    );
  wire  c$s1_case_scrut;
  reg [16:0] s1 = 17'd0;
  wire [16:0] c$s1_app_arg;
  wire [1:0] c$i_app_arg;
  wire [3:0] c$app_arg;
  reg [3:0] c$app_arg_0;
  wire signed [63:0] wild;
  wire signed [63:0] c$wild_app_arg;
  wire [3:0] result_0;
  wire [5:0] result_1;
  reg [1:0] i = 2'd0;
  wire signed [63:0] c$wild_app_arg_0;
  wire [4:0] c$app_arg_1;
  wire [8:0] result_2;
  wire signed [63:0] wild_0;
  reg [6:0] c$ds1_app_arg;
  wire [3:0] c$app_arg_2;
  wire [6:0] c$app_arg_3;
  wire [0:0] c$app_arg_4;
  wire [11:0] result_3;
  wire [7:0] ds1;
  wire [3:0] x;
  wire [1:0] result_4;
  reg [45:0] s1_0 = {1'b0,45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
  wire [47:0] result_5;
  wire [1:0] a1;
  wire [47:0] ds;
  reg [47:0] result_6;
  wire [31:0] c$ds_app_arg;
  wire [63:0] c$ds_app_arg_0;
  wire [63:0] x_0;
  wire [31:0] cnt;
  wire [1:0] a1_0;
  wire [45:0] c$ds_app_arg_1;
  wire [7:0] x_1;
  wire [8:0] result_7;
  wire [8:0] ds4;
  wire [0:0] b1;
  wire [12:0] c$app_arg_5;
  wire [7:0] xs;
  wire [7:0] xs_0;
  wire [2:0] i_0;
  reg [47:0] result_8;
  wire [12:0] tx;
  wire [8:0] result_9;
  // src/Calculator.hs:29:1-9
  wire [7:0] a1_1;
  // src/Calculator/Serial.hs:(25,1)-(29,38)
  wire [31:0] \c$bs'_app_arg ;
  wire [10:0] c$ds1_app_arg_0;
  wire  c$ds1_case_scrut;
  wire [92:0] result_10;
  wire [4:0] c$ds1_app_arg_1;
  wire [87:0] c$ds1_app_arg_2;
  wire [92:0] c$ds1_app_arg_3;
  wire [101:0] c$ds1_case_alt;
  wire [8:0] result_11;
  // src/Calculator/Serial.hs:(25,1)-(29,38)
  wire [4:0] i_1;
  // src/Calculator/Serial.hs:(25,1)-(29,38)
  wire [87:0] bs;
  // src/Calculator/Serial.hs:(25,1)-(29,38)
  wire [3:0] i1;
  reg [92:0] s1_1 = {{1'b0,4'bxxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                    8'd0,   8'd0,   8'd0,   8'd0}};
  // src/Calculator/Serial.hs:(25,1)-(29,38)
  wire [87:0] \bs' ;
  reg [33:0] result_12;
  wire [33:0] c$case_alt;
  wire [15:0] c$app_arg_6;
  wire [15:0] c$case_alt_0;
  wire [15:0] c$case_alt_1;
  // src/Calculator/ALU.hs:22:1-33
  wire [19:0] ws;
  wire [15:0] result_13;
  // src/Calculator/ALU.hs:22:1-33
  wire [3:0] c$ws_app_arg;
  // src/Calculator/ALU.hs:22:1-33
  wire [31:0] c$ws_app_arg_0;
  // src/Calculator/ALU.hs:12:1-33
  wire [19:0] ws_0;
  wire [15:0] result_14;
  // src/Calculator/ALU.hs:12:1-33
  wire [3:0] c$ws_app_arg_1;
  // src/Calculator/ALU.hs:12:1-33
  wire [31:0] c$ws_app_arg_2;
  // src/Calculator/State.hs:40:1-39
  wire [15:0] x_2;
  wire [15:0] c$app_arg_7;
  // src/Calculator/State.hs:33:1-45
  wire [0:0] op;
  wire [15:0] c$app_arg_8;
  wire [15:0] c$case_alt_2;
  wire [15:0] c$case_alt_3;
  // src/Calculator/ALU.hs:22:1-33
  wire [19:0] ws_1;
  wire [15:0] result_15;
  // src/Calculator/ALU.hs:22:1-33
  wire [3:0] c$ws_app_arg_3;
  // src/Calculator/ALU.hs:22:1-33
  wire [31:0] c$ws_app_arg_4;
  // src/Calculator/ALU.hs:12:1-33
  wire [19:0] ws_2;
  wire [15:0] result_16;
  // src/Calculator/ALU.hs:12:1-33
  wire [3:0] c$ws_app_arg_5;
  // src/Calculator/ALU.hs:12:1-33
  wire [31:0] c$ws_app_arg_6;
  wire [19:0] c$app_arg_9;
  // src/Calculator/State.hs:33:1-45
  wire [15:0] v;
  // src/Calculator/State.hs:33:1-45
  wire [3:0] d;
  // src/Calculator.hs:(45,1)-(48,39)
  wire [33:0] c$s1_app_arg_0;
  wire [15:0] c$app_arg_10;
  // src/Calculator/State.hs:47:1-73
  wire [3:0] accs;
  // src/Calculator/State.hs:47:1-73
  wire [4:0] accs1;
  // src/Calculator/State.hs:47:1-73
  wire [23:0] ws_3;
  wire [19:0] result_17;
  wire [19:0] c$case_alt_4;
  // src/Calculator.hs:(45,1)-(48,39)
  wire [6:0] x_3;
  // src/Calculator/State.hs:55:1-62
  wire [15:0] v_0;
  // src/Calculator.hs:(45,1)-(48,39)
  reg [33:0] s1_2 = {{4'd0,   4'd0,   4'd0,   4'd0},   1'd0,   {1'b0,16'bxxxxxxxxxxxxxxxx}};
  wire [7:0] result_18;
  wire [7:0] wild_1;
  reg [7:0] c$case_alt_5;
  wire [7:0] result_19;
  // src/Calculator.hs:29:1-9
  wire [3:0] x_4;
  wire [7:0] result_20;
  // src/Calculator/Serial.hs:16:1-9
  wire signed [63:0] wild1;
  reg [7:0] result_21;
  // src/Calculator/Serial.hs:16:1-9
  wire [20:0] c2;
  // src/Calculator/Serial.hs:16:1-9
  reg [7:0] \$j ;
  wire [7:0] result_22;
  wire  c$case_scrut;
  wire [7:0] c$case_alt_6;
  wire  c$case_scrut_0;
  wire signed [63:0] c$app_arg_11;
  // src/Calculator/Serial.hs:16:1-9
  wire signed [63:0] c$wild1_app_arg;
  // src/Calculator.hs:29:1-9
  wire [7:0] x_5;
  wire [8:0] result_23;
  reg [47:0] s1_3 = {1'b0,47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
  wire [56:0] result_24;
  wire [8:0] a1_2;
  wire [56:0] ds_0;
  wire [56:0] c$ds_case_alt;
  wire  lvl13;
  reg [56:0] c$ds_case_alt_0;
  wire [56:0] c$ds_case_alt_1;
  wire [31:0] c$ds_app_arg_2;
  wire [63:0] c$ds_app_arg_3;
  wire [63:0] x_6;
  wire [31:0] cnt_0;
  reg [56:0] c$ds_case_alt_2;
  wire [56:0] c$ds_case_alt_3;
  wire [8:0] c$ds_app_arg_4;
  wire [7:0] xs_1;
  wire [12:0] result_25;
  wire [2:0] i_2;
  wire [1:0] lvl14;
  wire [8:0] result_26;
  wire [8:0] ds4_0;
  wire [0:0] b1_0;
  wire [7:0] xs_2;
  wire [12:0] b;
  wire  sample1;
  wire [1:0] sample;
  wire [19:0] result_27;
  wire [3:0] lvl5;
  wire [15:0] c$app_arg_12;
  wire [15:0] result_28;
  wire [3:0] lvl8;
  wire [1:0] lvl7;
  wire  c$s1_case_scrut_0;
  reg [9:0] scanKeypad_$snextCol_s1 = 10'd0;
  wire [9:0] c$s1_app_arg_1;
  wire [1:0] c$i_app_arg_0;
  wire [3:0] c$app_arg_13;
  reg [3:0] c$app_arg_14;
  wire signed [63:0] wild_2;
  wire signed [63:0] c$wild_app_arg_1;
  wire [3:0] result_29;
  wire [5:0] result_30;
  reg [1:0] i_3 = 2'd0;
  wire [5:0] result_31;
  reg [15:0] \/=_c$app_arg  = {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                      1'b0,
                                                                      1'b0,
                                                                      1'b0},
 {1'b0,   1'b0,   1'b0,   1'b0}};
  wire  c$case_scrut_1;
  wire [3:0] c$app_arg_15;
  wire  result_32;
  wire [18:0] result_33;
  wire [18:0] result_34;
  reg [15:0] result_35 = {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                      1'b0,
                                                                      1'b0,
                                                                      1'b0},
 {1'b0,   1'b0,   1'b0,   1'b0}};
  reg [18:0] eta3 = 19'd0;
  reg [15:0] keypadEvents1_c$app_arg = {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                      1'b0,
                                                                      1'b0,
                                                                      1'b0},
 {1'b0,   1'b0,   1'b0,   1'b0}};
  wire [31:0] result_36;
  wire [79:0] c$app_arg_16;
  wire [19:0] c$app_arg_17;
  wire [4:0] result_37;
  wire [8:0] result_38;
  // src/Calculator.hs:29:1-9
  wire  c$ds_bindCsr;
  wire [3:0] c$vec;
  wire  c$din;
  wire [1:0] c$i_11;
  wire [3:0] c$ds1_app_arg_selection_res;
  wire [3:0] c$vec_0;
  wire [6:0] c$vec_1;
  wire [4:0] ds1_selection_1;
  wire signed [63:0] result_selection_res;
  wire [63:0] c$w;
  wire [19:0] result_sel_alt_9;
  wire [19:0] result_sel_alt_14;
  wire [16:0] c$case_alt_selection_1;
  wire [16:0] c$case_alt_selection_4;
  wire [4:0] c$vec_2;
  wire [3:0] c$vec2;
  wire [15:0] c$vec1;
  wire [4:0] c$vec_3;
  wire [3:0] c$vec2_0;
  wire [15:0] c$vec1_0;
  wire [16:0] c$app_arg_selection_8;
  wire [16:0] c$case_alt_selection_7;
  wire [16:0] c$case_alt_selection_10;
  wire [4:0] c$vec_4;
  wire [3:0] c$vec2_1;
  wire [15:0] c$vec1_1;
  wire [4:0] c$vec_5;
  wire [3:0] c$vec2_2;
  wire [15:0] c$vec1_2;
  wire [16:0] c$app_arg_selection_13;
  wire [16:0] c$app_arg_selection_16;
  wire [3:0] c$vec2_3;
  wire [4:0] wild_selection_1;
  wire signed [63:0] result_selection_res_0;
  wire signed [63:0] c$tte_rhs;
  wire signed [63:0] c$tte_rhs_0;
  wire [7:0] c$i_87;
  wire [7:0] c$i_88;
  wire signed [63:0] c$ds_case_alt_selection_res;
  wire [63:0] c$w_0;
  wire [3:0] c$vec_6;
  wire [7:0] result_res;
  wire [3:0] c$vec_7;
  wire  c$din_0;
  wire [15:0] c$vec1_3;
  wire [63:0] c$vec1_4;
  wire [16:0] result;
  wire [11:0] SS;

  assign result = {result_4[1:1],   result_3,
                   result_38[8:5]};

  assign c$s1_case_scrut = s1 == 17'd99999;

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : s1_register
    if ( c$ds_bindCsr) begin
      s1 <= 17'd0;
    end else begin
      s1 <= c$s1_app_arg;
    end
  end
  // register end

  assign c$s1_app_arg = c$s1_case_scrut ? 17'd0 : (s1 + 17'd1);

  assign c$i_app_arg = (i == 2'd3) ? 2'd0 : (i + 2'd1);

  assign c$vec = (((c$app_arg_0)));

  // map begin
  genvar i_4;
  generate
  for (i_4=0; i_4 < 4; i_4 = i_4 + 1) begin : map
    wire [0:0] map_in;
    assign map_in = c$vec[i_4*1+:1];
    wire  map_out;
    assign map_out = map_in == 1'b1;


    assign c$app_arg[i_4*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign c$din = (1'b1);

  // replaceBit start
  always @(*) begin
    c$app_arg_0 = 4'b0000;
    c$app_arg_0[(wild)] = c$din;
  end
  // replaceBit end

  assign wild = $signed(c$wild_app_arg);

  assign c$wild_app_arg = $unsigned({{(64-2) {1'b0}},i});

  // reverse begin
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 4; i_5 = i_5 + 1) begin : reverse
    assign result_0[(4 - 1 - i_5)*1+:1] = c$app_arg[i_5*1+:1];
  end
  endgenerate
  // reverse end

  assign result_1 = {result_0,   i};

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : i_register
    if ( c$ds_bindCsr) begin
      i <= 2'd0;
    end else if (c$s1_case_scrut) begin
      i <= c$i_app_arg;
    end
  end
  // register end

  assign c$i_11 = result_1[1:0];

  assign c$wild_app_arg_0 = $unsigned({{(64-2) {1'b0}},c$i_11});

  // index begin
  wire [4:0] vecArray [0:4-1];
  genvar i_6;
  generate
  for (i_6=0; i_6 < 4; i_6=i_6+1) begin : mk_array
    assign vecArray[(4-1)-i_6] = result_17[i_6*5+:5];
  end
  endgenerate
  assign c$app_arg_1 = vecArray[(wild_0)];
  // index end

  assign result_2 = {result_1[5:2],
                     c$app_arg_1};

  assign wild_0 = $signed(c$wild_app_arg_0);

  assign c$ds1_app_arg_selection_res = (x);

  always @(*) begin
    case(c$ds1_app_arg_selection_res)
      4'd0 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                              1'b1,   1'b1,   1'b1,   1'b0};
      4'd1 : c$ds1_app_arg = {1'b0,   1'b1,   1'b1,
                              1'b0,   1'b0,   1'b0,   1'b0};
      4'd2 : c$ds1_app_arg = {1'b1,   1'b1,   1'b0,
                              1'b1,   1'b1,   1'b0,   1'b1};
      4'd3 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                              1'b1,   1'b0,   1'b0,   1'b1};
      4'd4 : c$ds1_app_arg = {1'b0,   1'b1,   1'b1,
                              1'b0,   1'b0,   1'b1,   1'b1};
      4'd5 : c$ds1_app_arg = {1'b1,   1'b0,   1'b1,
                              1'b1,   1'b0,   1'b1,   1'b1};
      4'd6 : c$ds1_app_arg = {1'b1,   1'b0,   1'b1,
                              1'b1,   1'b1,   1'b1,   1'b1};
      4'd7 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                              1'b0,   1'b0,   1'b0,   1'b0};
      4'd8 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                              1'b1,   1'b1,   1'b1,   1'b1};
      4'd9 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                              1'b1,   1'b0,   1'b1,   1'b1};
      4'd10 : c$ds1_app_arg = {1'b1,   1'b1,   1'b1,
                               1'b0,   1'b1,   1'b1,   1'b1};
      4'd11 : c$ds1_app_arg = {1'b0,   1'b0,   1'b1,
                               1'b1,   1'b1,   1'b1,   1'b1};
      4'd12 : c$ds1_app_arg = {1'b1,   1'b0,   1'b0,
                               1'b1,   1'b1,   1'b1,   1'b0};
      4'd13 : c$ds1_app_arg = {1'b0,   1'b1,   1'b1,
                               1'b1,   1'b1,   1'b0,   1'b1};
      4'd14 : c$ds1_app_arg = {1'b1,   1'b0,   1'b0,
                               1'b1,   1'b1,   1'b1,   1'b1};
      4'd15 : c$ds1_app_arg = {1'b1,   1'b0,   1'b0,
                               1'b0,   1'b1,   1'b1,   1'b1};
      default : c$ds1_app_arg = {7 {1'bx}};
    endcase
  end

  assign c$vec_0 = result_2[8:5];

  // map begin
  genvar i_7;
  generate
  for (i_7=0; i_7 < 4; i_7 = i_7 + 1) begin : map_0
    wire  map_in_0;
    assign map_in_0 = c$vec_0[i_7*1+:1];
    wire  map_out_0;
    wire [0:0] c$app_arg_18;
    wire  result_40;
    assign map_out_0 = result_40;

    assign c$app_arg_18 = map_in_0 ? 1'b1 : 1'b0;

    assign result_40 = ~ (c$app_arg_18);


    assign c$app_arg_2[i_7*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  assign c$vec_1 = ds1[7:1];

  // map begin
  genvar i_8;
  generate
  for (i_8=0; i_8 < 7; i_8 = i_8 + 1) begin : map_1
    wire  map_in_1;
    assign map_in_1 = c$vec_1[i_8*1+:1];
    wire  map_out_1;
    wire [0:0] c$app_arg_19;
    wire  result_41;
    assign map_out_1 = result_41;

    assign c$app_arg_19 = map_in_1 ? 1'b1 : 1'b0;

    assign result_41 = ~ (c$app_arg_19);


    assign c$app_arg_3[i_8*1+:1] = map_out_1;
  end
  endgenerate
  // map end

  assign c$app_arg_4 = ds1[0:0] ? 1'b1 : 1'b0;

  assign result_3 = {c$app_arg_2,   c$app_arg_3,
                     ~ (c$app_arg_4)};

  assign ds1_selection_1 = result_2[4:0];

  assign ds1 = ds1_selection_1[4:4] ? {c$ds1_app_arg,
                                       1'b0} : {{7 {1'b0}},   1'b0};

  assign x = result_2[3:0];

  assign result_4 = result_5[47:46];

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : s1_0_register
    if ( c$ds_bindCsr) begin
      s1_0 <= {1'b0,45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    end else begin
      s1_0 <= result_5[45:0];
    end
  end
  // register end

  assign result_5 = {{a1[1:1],   a1[0:0]},
                     ds[45:0]};

  assign a1 = ds[47:46];

  assign ds = s1_0[45:45] ? result_6 : {{1'b1,
                                         1'b1},   c$ds_app_arg_1};

  assign result_selection_res = (x_0 > 64'd1) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(result_selection_res)
      64'sd1 : result_6 = {{a1_0[1:1],
                            a1_0[0:0]},   {1'b1,c$ds_app_arg,tx}};
      default : result_6 = result_8;
    endcase
  end

  assign c$ds_app_arg = $unsigned(c$ds_app_arg_0);

  assign c$w = (x_0 - 64'd1);

  // narrow32Word begin
  assign c$ds_app_arg_0 = $unsigned(c$w[31:0]);
  // narrow32Word end

  assign x_0 = cnt;

  assign cnt = s1_0[44:13];

  assign a1_0 = result_8[47:46];

  assign c$ds_app_arg_1 = result_9[8:8] ? {1'b1,32'd10416,{2'b00,x_1,3'bxxx}} : {1'b0,45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign x_1 = result_9[7:0];

  assign result_7 = {ds4[8:1],   b1};

  assign ds4 = ({1'b0,xs_0});

  assign b1 = ds4[0:0];

  assign c$app_arg_5 = (i_0 == 3'd7) ? {2'b10,11'bxxxxxxxxxxx} : {2'b01,result_7[8:1],i_0 + 3'd1};

  assign xs = tx[10:3];

  assign xs_0 = tx[10:3];

  assign i_0 = tx[2:0];

  always @(*) begin
    case(tx[12:11])
      2'b00 : result_8 = {{1'b0,   1'b0},
                          {1'b1,32'd10416,{2'b01,xs,3'd0}}};
      2'b01 : result_8 = {{ xs_0[0] ,   1'b0},
                          {1'b1,32'd10416,c$app_arg_5}};
      default : result_8 = {{1'b1,   1'b0},
                            {1'b0,45'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};
    endcase
  end

  assign tx = s1_0[12:0];

  assign result_9 = result_11[8:8] ? {1'b1,a1_1} : {1'b0,8'bxxxxxxxx};

  assign a1_1 = result_11[7:0];

  // map begin
  genvar i_9;
  generate
  for (i_9=0; i_9 < 4; i_9 = i_9 + 1) begin : map_2
    wire [4:0] map_in_2;
    assign map_in_2 = result_17[i_9*5+:5];
    wire [7:0] map_out_2;
    // src/Calculator/Serial.hs:(25,1)-(29,38)
    wire [3:0] x_8;
    wire signed [63:0] c$app_arg_20;
    wire [7:0] result_42;
    assign map_out_2 = result_42;

    assign x_8 = map_in_2[3:0];

    assign c$app_arg_20 = $unsigned({{(64-4) {1'b0}},x_8});

    assign result_42 = map_in_2[4:4] ? (8'd48 + ($unsigned(c$app_arg_20[0+:8]))) : 8'd32;


    assign \c$bs'_app_arg [i_9*8+:8] = map_out_2;
  end
  endgenerate
  // map end

  // zipWith start
  genvar i_10;
  generate
  for (i_10 = 0; i_10 < 11; i_10 = i_10 + 1) begin : zipWith
    wire [7:0] zipWith_in1;
    assign zipWith_in1 = bs[i_10*8+:8];
    wire [7:0] zipWith_in2;
    assign zipWith_in2 = \bs' [i_10*8+:8];
    wire  c$n;
    assign c$n = zipWith_in1 == zipWith_in2;


    assign c$ds1_app_arg_0[i_10*1+:1] = c$n;
  end
  endgenerate
  // zipWith end

  wire [10:0] vec;
  wire  acc_4_0;
  wire  acc_1;
  wire  acc_2;
  wire  acc_3;
  wire  acc_4;
  wire  acc_5;
  wire  acc_6;
  wire  acc_7;
  wire  acc_8;
  wire  acc_9;
  wire  acc_10;
  wire  acc_1_0;
  wire  acc_1_1;
  wire  acc_1_2;
  wire  acc_1_3;
  wire  acc_1_4;
  wire  acc_11;
  wire  acc_2_0;
  wire  acc_2_1;
  wire  acc_3_0;
  wire  acc_2_2;
  assign c$ds1_case_scrut = acc_4_0;

  assign vec = c$ds1_app_arg_0;

  assign acc_1 = vec[10:10];

  assign acc_2 = vec[9:9];

  assign acc_3 = vec[8:8];

  assign acc_4 = vec[7:7];

  assign acc_5 = vec[6:6];

  assign acc_6 = vec[5:5];

  assign acc_7 = vec[4:4];

  assign acc_8 = vec[3:3];

  assign acc_9 = vec[2:2];

  assign acc_10 = vec[1:1];

  assign acc_11 = vec[0:0];

  assign acc_1_0 = acc_1 & acc_2;



  assign acc_1_1 = acc_3 & acc_4;



  assign acc_1_2 = acc_5 & acc_6;



  assign acc_1_3 = acc_7 & acc_8;



  assign acc_1_4 = acc_9 & acc_10;



  assign acc_2_0 = acc_1_0 & acc_1_1;



  assign acc_2_1 = acc_1_2 & acc_1_3;



  assign acc_2_2 = acc_1_4 & acc_11;



  assign acc_3_0 = acc_2_0 & acc_2_1;



  assign acc_4_0 = acc_3_0 & acc_2_2;





  assign result_10 = c$ds1_case_scrut ? s1_1 : {{1'b1,4'd0},
                                                \bs' };

  assign c$ds1_app_arg_1 = (i1 == 4'd10) ? {1'b0,4'bxxxx} : {1'b1,i1 + 4'd1};

  // rotateLeftS begin
  localparam shift_amount = 1 % 11;

  generate
  if (shift_amount == 0) begin : no_shift
    assign c$ds1_app_arg_2 = bs;
  end else begin : do_shift
    assign c$ds1_app_arg_2 = {bs[((11-shift_amount)*8)-1 : 0]
                     ,bs[88-1 : (11-shift_amount)*8]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$ds1_app_arg_3 = result_4[0:0] ? {c$ds1_app_arg_1,
                                            c$ds1_app_arg_2} : s1_1;

  assign c$ds1_case_alt = i_1[4:4] ? {{1'b1,bs[88-1 -: 8]},
                                      c$ds1_app_arg_3} : {{1'b0,8'bxxxxxxxx},
                                                          result_10};

  assign result_11 = c$ds1_case_alt[101:93];

  assign i_1 = s1_1[92:88];

  assign bs = s1_1[87:0];

  assign i1 = i_1[3:0];

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : s1_1_register
    if ( c$ds_bindCsr) begin
      s1_1 <= {{1'b0,4'bxxxx},   {8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
                      8'd0,   8'd0,   8'd0,   8'd0}};
    end else begin
      s1_1 <= c$ds1_case_alt[92:0];
    end
  end
  // register end

  assign \bs'  = {{8'd27,   8'd91,   8'd50,   8'd74,   8'd27,   8'd91,   8'd72},\c$bs'_app_arg };

  assign result_sel_alt_9 = c$app_arg_9;

  assign result_sel_alt_14 = ({4'd0,c$app_arg_7});

  always @(*) begin
    case(x_3[6:4])
      3'b000 : result_12 = {s1_2[33:18],
                            s1_2[17:17],   {1'b1,result_sel_alt_9[15:0]}};
      3'b001 : result_12 = {c$app_arg_8,   op,
                            {1'b0,16'bxxxxxxxxxxxxxxxx}};
      3'b010 : result_12 = {s1_2[33:18],
                            s1_2[17:17],   {1'b1,result_sel_alt_14[19:4]}};
      3'b011 : result_12 = {{4 {4'd0}},   1'd0,
                            {1'b0,16'bxxxxxxxxxxxxxxxx}};
      default : result_12 = c$case_alt;
    endcase
  end

  assign c$case_alt = {c$app_arg_6,
                       s1_2[17:17],   {1'b0,16'bxxxxxxxxxxxxxxxx}};

  assign c$app_arg_6 = s1_2[17:17] ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_selection_1 = s1_2[16:0];

  assign c$case_alt_0 = c$case_alt_selection_1[16:16] ? result_13 : s1_2[33:18];

  assign c$case_alt_selection_4 = s1_2[16:0];

  assign c$case_alt_1 = c$case_alt_selection_4[16:16] ? result_14 : s1_2[33:18];

  assign c$vec_2 = ({c$ws_app_arg,1'b0});

  assign c$vec2 = (c$vec_2[4-1 : 0]);

  // zipWith start
  genvar i_11;
  generate
  for (i_11 = 0; i_11 < 4; i_11 = i_11 + 1) begin : zipWith_0
    wire [7:0] zipWith_in1_0;
    assign zipWith_in1_0 = c$ws_app_arg_0[i_11*8+:8];
    wire  zipWith_in2_0;
    assign zipWith_in2_0 = c$vec2[i_11*1+:1];
    wire [4:0] c$n_0;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] c$z_app_arg;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] c$z_app_arg_0;
    wire [5:0] result_44;
    wire signed [63:0] c$app_arg_21;
    wire [4:0] result_43;
    // src/Calculator/ALU.hs:22:1-33
    wire [3:0] x_9;
    // src/Calculator/ALU.hs:22:1-33
    wire [3:0] y;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] \z' ;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] z;
    assign c$n_0 = result_43;

    assign c$z_app_arg =  ((x_9)) - ((y));

    assign c$z_app_arg_0 = zipWith_in2_0 ? 5'd1 : 5'd0;

    assign result_44 = (z <= 5'd9) ? {1'b0,
                                      z} : {1'b1,   z + 5'd10};

    assign c$app_arg_21 = $unsigned({{(64-5) {1'b0}},\z' });

    assign result_43 = {result_44[5:5],
                        $unsigned(c$app_arg_21[0+:4])};

    assign x_9 = zipWith_in1_0[7:4];

    assign y = zipWith_in1_0[3:0];

    assign \z'  = result_44[4:0];

    assign z = c$z_app_arg - c$z_app_arg_0;


    assign ws[i_11*5+:5] = c$n_0;
  end
  endgenerate
  // zipWith end

  // map begin
  genvar i_12;
  generate
  for (i_12=0; i_12 < 4; i_12 = i_12 + 1) begin : map_3
    wire [4:0] map_in_3;
    assign map_in_3 = ws[i_12*5+:5];
    wire [3:0] map_out_3;
    assign map_out_3 = map_in_3[3:0];


    assign result_13[i_12*4+:4] = map_out_3;
  end
  endgenerate
  // map end

  // map begin
  genvar i_13;
  generate
  for (i_13=0; i_13 < 4; i_13 = i_13 + 1) begin : map_4
    wire [4:0] map_in_4;
    assign map_in_4 = ws[i_13*5+:5];
    wire  map_out_4;
    assign map_out_4 = map_in_4[4:4];


    assign c$ws_app_arg[i_13*1+:1] = map_out_4;
  end
  endgenerate
  // map end

  assign c$vec1 = s1_2[33:18];

  // zipWith start
  genvar i_14;
  generate
  for (i_14 = 0; i_14 < 4; i_14 = i_14 + 1) begin : zipWith_1
    wire [3:0] zipWith_in1_1;
    assign zipWith_in1_1 = c$vec1[i_14*4+:4];
    wire [3:0] zipWith_in2_1;
    assign zipWith_in2_1 = x_2[i_14*4+:4];
    wire [7:0] c$n_1;
    assign c$n_1 = {zipWith_in1_1,   zipWith_in2_1};


    assign c$ws_app_arg_0[i_14*8+:8] = c$n_1;
  end
  endgenerate
  // zipWith end

  assign c$vec_3 = ({c$ws_app_arg_1,1'b0});

  assign c$vec2_0 = (c$vec_3[4-1 : 0]);

  // zipWith start
  genvar i_15;
  generate
  for (i_15 = 0; i_15 < 4; i_15 = i_15 + 1) begin : zipWith_2
    wire [7:0] zipWith_in1_2;
    assign zipWith_in1_2 = c$ws_app_arg_2[i_15*8+:8];
    wire  zipWith_in2_2;
    assign zipWith_in2_2 = c$vec2_0[i_15*1+:1];
    wire [4:0] c$n_2;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] c$z_app_arg_1;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] c$z_app_arg_2;
    wire [5:0] result_46;
    wire signed [63:0] c$app_arg_22;
    wire [4:0] result_45;
    // src/Calculator/ALU.hs:12:1-33
    wire [3:0] x_10;
    // src/Calculator/ALU.hs:12:1-33
    wire [3:0] y_1;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] \z'_1 ;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] z_0;
    assign c$n_2 = result_45;

    assign c$z_app_arg_1 = ((x_10)) + ((y_1));

    assign c$z_app_arg_2 = zipWith_in2_2 ? 5'd1 : 5'd0;

    assign result_46 = (z_0 <= 5'd9) ? {1'b0,
                                        z_0} : {1'b1,   z_0 - 5'd10};

    assign c$app_arg_22 = $unsigned({{(64-5) {1'b0}},\z'_1 });

    assign result_45 = {result_46[5:5],
                        $unsigned(c$app_arg_22[0+:4])};

    assign x_10 = zipWith_in1_2[7:4];

    assign y_1 = zipWith_in1_2[3:0];

    assign \z'_1  = result_46[4:0];

    assign z_0 = c$z_app_arg_1 + c$z_app_arg_2;


    assign ws_0[i_15*5+:5] = c$n_2;
  end
  endgenerate
  // zipWith end

  // map begin
  genvar i_16;
  generate
  for (i_16=0; i_16 < 4; i_16 = i_16 + 1) begin : map_5
    wire [4:0] map_in_5;
    assign map_in_5 = ws_0[i_16*5+:5];
    wire [3:0] map_out_5;
    assign map_out_5 = map_in_5[3:0];


    assign result_14[i_16*4+:4] = map_out_5;
  end
  endgenerate
  // map end

  // map begin
  genvar i_17;
  generate
  for (i_17=0; i_17 < 4; i_17 = i_17 + 1) begin : map_6
    wire [4:0] map_in_6;
    assign map_in_6 = ws_0[i_17*5+:5];
    wire  map_out_6;
    assign map_out_6 = map_in_6[4:4];


    assign c$ws_app_arg_1[i_17*1+:1] = map_out_6;
  end
  endgenerate
  // map end

  assign c$vec1_0 = s1_2[33:18];

  // zipWith start
  genvar i_18;
  generate
  for (i_18 = 0; i_18 < 4; i_18 = i_18 + 1) begin : zipWith_3
    wire [3:0] zipWith_in1_3;
    assign zipWith_in1_3 = c$vec1_0[i_18*4+:4];
    wire [3:0] zipWith_in2_3;
    assign zipWith_in2_3 = x_2[i_18*4+:4];
    wire [7:0] c$n_3;
    assign c$n_3 = {zipWith_in1_3,   zipWith_in2_3};


    assign c$ws_app_arg_2[i_18*8+:8] = c$n_3;
  end
  endgenerate
  // zipWith end

  assign x_2 = s1_2[15:0];

  assign c$app_arg_selection_8 = s1_2[16:0];

  assign c$app_arg_7 = c$app_arg_selection_8[16:16] ? v : ({4 {4'd0}});

  assign op = x_3[3:3];

  assign c$app_arg_8 = s1_2[17:17] ? c$case_alt_2 : c$case_alt_3;

  assign c$case_alt_selection_7 = s1_2[16:0];

  assign c$case_alt_2 = c$case_alt_selection_7[16:16] ? result_15 : s1_2[33:18];

  assign c$case_alt_selection_10 = s1_2[16:0];

  assign c$case_alt_3 = c$case_alt_selection_10[16:16] ? result_16 : s1_2[33:18];

  assign c$vec_4 = ({c$ws_app_arg_3,1'b0});

  assign c$vec2_1 = (c$vec_4[4-1 : 0]);

  // zipWith start
  genvar i_19;
  generate
  for (i_19 = 0; i_19 < 4; i_19 = i_19 + 1) begin : zipWith_4
    wire [7:0] zipWith_in1_4;
    assign zipWith_in1_4 = c$ws_app_arg_4[i_19*8+:8];
    wire  zipWith_in2_4;
    assign zipWith_in2_4 = c$vec2_1[i_19*1+:1];
    wire [4:0] c$n_4;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] c$z_app_arg_3;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] c$z_app_arg_4;
    wire [5:0] result_48;
    wire signed [63:0] c$app_arg_23;
    wire [4:0] result_47;
    // src/Calculator/ALU.hs:22:1-33
    wire [3:0] x_11;
    // src/Calculator/ALU.hs:22:1-33
    wire [3:0] y_2;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] \z'_2 ;
    // src/Calculator/ALU.hs:22:1-33
    wire [4:0] z_1;
    assign c$n_4 = result_47;

    assign c$z_app_arg_3 =  ((x_11)) - ((y_2));

    assign c$z_app_arg_4 = zipWith_in2_4 ? 5'd1 : 5'd0;

    assign result_48 = (z_1 <= 5'd9) ? {1'b0,
                                        z_1} : {1'b1,   z_1 + 5'd10};

    assign c$app_arg_23 = $unsigned({{(64-5) {1'b0}},\z'_2 });

    assign result_47 = {result_48[5:5],
                        $unsigned(c$app_arg_23[0+:4])};

    assign x_11 = zipWith_in1_4[7:4];

    assign y_2 = zipWith_in1_4[3:0];

    assign \z'_2  = result_48[4:0];

    assign z_1 = c$z_app_arg_3 - c$z_app_arg_4;


    assign ws_1[i_19*5+:5] = c$n_4;
  end
  endgenerate
  // zipWith end

  // map begin
  genvar i_20;
  generate
  for (i_20=0; i_20 < 4; i_20 = i_20 + 1) begin : map_7
    wire [4:0] map_in_7;
    assign map_in_7 = ws_1[i_20*5+:5];
    wire [3:0] map_out_7;
    assign map_out_7 = map_in_7[3:0];


    assign result_15[i_20*4+:4] = map_out_7;
  end
  endgenerate
  // map end

  // map begin
  genvar i_21;
  generate
  for (i_21=0; i_21 < 4; i_21 = i_21 + 1) begin : map_8
    wire [4:0] map_in_8;
    assign map_in_8 = ws_1[i_21*5+:5];
    wire  map_out_8;
    assign map_out_8 = map_in_8[4:4];


    assign c$ws_app_arg_3[i_21*1+:1] = map_out_8;
  end
  endgenerate
  // map end

  assign c$vec1_1 = s1_2[33:18];

  // zipWith start
  genvar i_22;
  generate
  for (i_22 = 0; i_22 < 4; i_22 = i_22 + 1) begin : zipWith_5
    wire [3:0] zipWith_in1_5;
    assign zipWith_in1_5 = c$vec1_1[i_22*4+:4];
    wire [3:0] zipWith_in2_5;
    assign zipWith_in2_5 = v[i_22*4+:4];
    wire [7:0] c$n_5;
    assign c$n_5 = {zipWith_in1_5,   zipWith_in2_5};


    assign c$ws_app_arg_4[i_22*8+:8] = c$n_5;
  end
  endgenerate
  // zipWith end

  assign c$vec_5 = ({c$ws_app_arg_5,1'b0});

  assign c$vec2_2 = (c$vec_5[4-1 : 0]);

  // zipWith start
  genvar i_23;
  generate
  for (i_23 = 0; i_23 < 4; i_23 = i_23 + 1) begin : zipWith_6
    wire [7:0] zipWith_in1_6;
    assign zipWith_in1_6 = c$ws_app_arg_6[i_23*8+:8];
    wire  zipWith_in2_6;
    assign zipWith_in2_6 = c$vec2_2[i_23*1+:1];
    wire [4:0] c$n_6;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] c$z_app_arg_5;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] c$z_app_arg_6;
    wire [5:0] result_50;
    wire signed [63:0] c$app_arg_24;
    wire [4:0] result_49;
    // src/Calculator/ALU.hs:12:1-33
    wire [3:0] x_12;
    // src/Calculator/ALU.hs:12:1-33
    wire [3:0] y_3;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] \z'_3 ;
    // src/Calculator/ALU.hs:12:1-33
    wire [4:0] z_2;
    assign c$n_6 = result_49;

    assign c$z_app_arg_5 = ((x_12)) + ((y_3));

    assign c$z_app_arg_6 = zipWith_in2_6 ? 5'd1 : 5'd0;

    assign result_50 = (z_2 <= 5'd9) ? {1'b0,
                                        z_2} : {1'b1,   z_2 - 5'd10};

    assign c$app_arg_24 = $unsigned({{(64-5) {1'b0}},\z'_3 });

    assign result_49 = {result_50[5:5],
                        $unsigned(c$app_arg_24[0+:4])};

    assign x_12 = zipWith_in1_6[7:4];

    assign y_3 = zipWith_in1_6[3:0];

    assign \z'_3  = result_50[4:0];

    assign z_2 = c$z_app_arg_5 + c$z_app_arg_6;


    assign ws_2[i_23*5+:5] = c$n_6;
  end
  endgenerate
  // zipWith end

  // map begin
  genvar i_24;
  generate
  for (i_24=0; i_24 < 4; i_24 = i_24 + 1) begin : map_9
    wire [4:0] map_in_9;
    assign map_in_9 = ws_2[i_24*5+:5];
    wire [3:0] map_out_9;
    assign map_out_9 = map_in_9[3:0];


    assign result_16[i_24*4+:4] = map_out_9;
  end
  endgenerate
  // map end

  // map begin
  genvar i_25;
  generate
  for (i_25=0; i_25 < 4; i_25 = i_25 + 1) begin : map_10
    wire [4:0] map_in_10;
    assign map_in_10 = ws_2[i_25*5+:5];
    wire  map_out_10;
    assign map_out_10 = map_in_10[4:4];


    assign c$ws_app_arg_5[i_25*1+:1] = map_out_10;
  end
  endgenerate
  // map end

  assign c$vec1_2 = s1_2[33:18];

  // zipWith start
  genvar i_26;
  generate
  for (i_26 = 0; i_26 < 4; i_26 = i_26 + 1) begin : zipWith_7
    wire [3:0] zipWith_in1_7;
    assign zipWith_in1_7 = c$vec1_2[i_26*4+:4];
    wire [3:0] zipWith_in2_7;
    assign zipWith_in2_7 = v[i_26*4+:4];
    wire [7:0] c$n_7;
    assign c$n_7 = {zipWith_in1_7,   zipWith_in2_7};


    assign c$ws_app_arg_6[i_26*8+:8] = c$n_7;
  end
  endgenerate
  // zipWith end

  assign c$app_arg_selection_13 = s1_2[16:0];

  assign c$app_arg_9 = c$app_arg_selection_13[16:16] ? ({v,d}) : ({({4 {4'd0}}),d});

  assign v = s1_2[15:0];

  assign d = x_3[3:0];

  assign c$s1_app_arg_0 = result_18[7:7] ? result_12 : s1_2;

  assign c$app_arg_selection_16 = s1_2[16:0];

  assign c$app_arg_10 = c$app_arg_selection_16[16:16] ? v_0 : s1_2[33:18];

  // map begin
  genvar i_27;
  generate
  for (i_27=0; i_27 < 4; i_27 = i_27 + 1) begin : map_11
    wire [5:0] map_in_11;
    assign map_in_11 = ws_3[i_27*6+:6];
    wire  map_out_11;
    assign map_out_11 = map_in_11[5:5];


    assign accs[i_27*1+:1] = map_out_11;
  end
  endgenerate
  // map end

  assign accs1 = {1'b0,   accs};

  assign c$vec2_3 = (accs1[5-1 : 1]);

  // zipWith start
  genvar i_28;
  generate
  for (i_28 = 0; i_28 < 4; i_28 = i_28 + 1) begin : zipWith_8
    wire [3:0] zipWith_in1_8;
    assign zipWith_in1_8 = c$app_arg_10[i_28*4+:4];
    wire  zipWith_in2_8;
    assign zipWith_in2_8 = c$vec2_3[i_28*1+:1];
    wire [5:0] c$n_8;
    wire [5:0] result_51;
    reg [5:0] c$case_alt_8;
    assign c$n_8 = result_51;

    assign result_51 = zipWith_in2_8 ? {1'b1,
                                      {1'b1,zipWith_in1_8}} : c$case_alt_8;

    always @(*) begin
      case(zipWith_in1_8)
        4'd0 : c$case_alt_8 = {1'b0,
                               {1'b0,4'bxxxx}};
        default : c$case_alt_8 = {1'b1,
                                  {1'b1,zipWith_in1_8}};
      endcase
    end


    assign ws_3[i_28*6+:6] = c$n_8;
  end
  endgenerate
  // zipWith end

  assign result_17 = (accs1[1-1:0]) ? c$case_alt_4 : {{1'b0,4'bxxxx},
                                                      {{{1'b0,4'bxxxx},   {1'b0,4'bxxxx}},{1'b1,4'd0}}};

  // map begin
  genvar i_29;
  generate
  for (i_29=0; i_29 < 4; i_29 = i_29 + 1) begin : map_12
    wire [5:0] map_in_12;
    assign map_in_12 = ws_3[i_29*6+:6];
    wire [4:0] map_out_12;
    assign map_out_12 = map_in_12[4:0];


    assign c$case_alt_4[i_29*5+:5] = map_out_12;
  end
  endgenerate
  // map end

  assign x_3 = result_18[6:0];

  assign v_0 = s1_2[15:0];

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : s1_2_register
    if ( c$ds_bindCsr) begin
      s1_2 <= {{4'd0,   4'd0,   4'd0,   4'd0},   1'd0,   {1'b0,16'bxxxxxxxxxxxxxxxx}};
    end else begin
      s1_2 <= c$s1_app_arg_0;
    end
  end
  // register end

  assign result_18 = wild_1[7:7] ? wild_1 : result_20;

  assign wild_selection_1 = result_38[4:0];

  assign wild_1 = wild_selection_1[4:4] ? result_19 : {1'b0,7'bxxxxxxx};

  always @(*) begin
    case(x_4)
      4'd10 : c$case_alt_5 = {1'b1,{3'b001,1'd0,3'bxxx}};
      4'd11 : c$case_alt_5 = {1'b1,{3'b010,4'bxxxx}};
      4'd12 : c$case_alt_5 = {1'b1,{3'b011,4'bxxxx}};
      4'd13 : c$case_alt_5 = {1'b1,{3'b001,1'd1,3'bxxx}};
      4'd14 : c$case_alt_5 = {1'b1,{3'b100,4'bxxxx}};
      default : c$case_alt_5 = {1'b0,7'bxxxxxxx};
    endcase
  end

  assign result_19 = (x_4 <= 4'd9) ? {1'b1,{3'b000,(x_4)}} : c$case_alt_5;

  assign x_4 = result_38[3:0];

  assign result_20 = result_23[8:8] ? result_21 : {1'b0,7'bxxxxxxx};

  assign wild1 = $signed(c$wild1_app_arg);

  assign result_selection_res_0 = (($unsigned(wild1)) <= 64'd1114111) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(result_selection_res_0)
      64'sd1 : result_21 = result_22;
      default : result_21 = {8 {1'bx}};
    endcase
  end

  assign c2 = $unsigned(wild1[0+:21]);

  always @(*) begin
    case(c2)
      21'd8 : \$j  = {1'b1,{3'b010,4'bxxxx}};
      21'd13 : \$j  = {1'b1,{3'b100,4'bxxxx}};
      21'd43 : \$j  = {1'b1,{3'b001,1'd0,3'bxxx}};
      21'd45 : \$j  = {1'b1,{3'b001,1'd1,3'bxxx}};
      21'd61 : \$j  = {1'b1,{3'b100,4'bxxxx}};
      21'd127 : \$j  = {1'b1,{3'b011,4'bxxxx}};
      default : \$j  = {1'b0,7'bxxxxxxx};
    endcase
  end

  assign result_22 = c$case_scrut ? c$case_alt_6 : \$j ;

  assign c$tte_rhs = (21'd48 <= c2) ? 64'sd1 : 64'sd0;

  assign c$case_scrut = c$tte_rhs[0];

  assign c$case_alt_6 = c$case_scrut_0 ? {1'b1,{3'b000,$unsigned(c$app_arg_11[0+:4])}} : \$j ;

  assign c$tte_rhs_0 = (c2 <= 21'd57) ? 64'sd1 : 64'sd0;

  assign c$case_scrut_0 = c$tte_rhs_0[0];

  assign c$i_87 = ((x_5) - 8'd48);

  assign c$app_arg_11 = $unsigned({{(64-8) {1'b0}},c$i_87});

  assign c$i_88 = (x_5);

  assign c$wild1_app_arg = $unsigned({{(64-8) {1'b0}},c$i_88});

  assign x_5 = result_23[7:0];

  assign result_23 = result_24[56:48];

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : s1_3_register
    if ( c$ds_bindCsr) begin
      s1_3 <= {1'b0,47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    end else begin
      s1_3 <= result_24[47:0];
    end
  end
  // register end

  assign result_24 = {a1_2,   ds_0[47:0]};

  assign a1_2 = ds_0[56:48];

  assign ds_0 = s1_3[47:47] ? c$ds_case_alt_0 : c$ds_case_alt;

  assign c$ds_case_alt = lvl13 ? {{1'b0,8'bxxxxxxxx},
                                  {1'b1,32'd5207,{1'b0,1'bx},{2'b00,11'bxxxxxxxxxxx}}} : {{1'b0,8'bxxxxxxxx},
                                                                                          {1'b0,47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};

  assign lvl13 = RX == (1'b0);

  assign c$ds_case_alt_selection_res = (x_6 > 64'd1) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(c$ds_case_alt_selection_res)
      64'sd1 : c$ds_case_alt_0 = {{1'b0,8'bxxxxxxxx},
                                  {1'b1,c$ds_app_arg_2,sample,b}};
      default : c$ds_case_alt_0 = c$ds_case_alt_1;
    endcase
  end

  assign c$ds_case_alt_1 = sample[1:1] ? c$ds_case_alt_2 : {{1'b0,8'bxxxxxxxx},
                                                            {1'b1,32'd5208,lvl14,b}};

  assign c$ds_app_arg_2 = $unsigned(c$ds_app_arg_3);

  assign c$w_0 = (x_6 - 64'd1);

  // narrow32Word begin
  assign c$ds_app_arg_3 = $unsigned(c$w_0[31:0]);
  // narrow32Word end

  assign x_6 = cnt_0;

  assign cnt_0 = s1_3[46:15];

  always @(*) begin
    case(b[12:11])
      2'b00 : c$ds_case_alt_2 = c$ds_case_alt_3;
      2'b01 : c$ds_case_alt_2 = {{1'b0,8'bxxxxxxxx},
                                 {1'b1,32'd5208,{1'b0,1'bx},result_25}};
      default : c$ds_case_alt_2 = {c$ds_app_arg_4,
                                   {1'b0,47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};
    endcase
  end

  assign c$ds_case_alt_3 = (sample1 == (1'b0)) ? {{1'b0,8'bxxxxxxxx},
                                                  {1'b1,32'd5208,{1'b0,1'bx},{2'b01,8'b00000000,3'd0}}} : {{1'b0,8'bxxxxxxxx},
                                                                                                           {1'b0,47'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}};

  assign c$ds_app_arg_4 = (sample1 == (1'b1)) ? {1'b1,xs_1} : {1'b0,8'bxxxxxxxx};

  assign xs_1 = b[10:3];

  assign result_25 = (i_2 == 3'd7) ? {2'b10,result_26[8:1],3'bxxx} : {2'b01,result_26[8:1],i_2 + 3'd1};

  assign i_2 = b[2:0];

  assign lvl14 = {1'b1,RX};

  assign result_26 = {ds4_0[8:1],   b1_0};

  assign ds4_0 = ({(sample1),xs_2});

  assign b1_0 = ds4_0[0:0];

  assign xs_2 = b[10:3];

  assign b = s1_3[12:0];

  assign sample1 = sample[0:0];

  assign sample = s1_3[14:13];

  assign result_27 = {lvl5,   c$app_arg_12};

  assign c$vec_6 = result_31[5:2];

  // map begin
  genvar i_30;
  generate
  for (i_30=0; i_30 < 4; i_30 = i_30 + 1) begin : map_13
    wire  map_in_13;
    assign map_in_13 = c$vec_6[i_30*1+:1];
    wire  map_out_13;
    wire [0:0] c$app_arg_25;
    wire  result_52;
    assign map_out_13 = result_52;

    assign c$app_arg_25 = map_in_13 ? 1'b1 : 1'b0;

    assign result_52 = ~ (c$app_arg_25);


    assign lvl5[i_30*1+:1] = map_out_13;
  end
  endgenerate
  // map end

  // transpose begin
  genvar row_index;
  genvar col_index;
  generate
  for (row_index = 0; row_index < 4; row_index = row_index + 1) begin : transpose_outer
    for (col_index = 0; col_index < 4; col_index = col_index + 1) begin : transpose_inner
      assign c$app_arg_12[((col_index*4)+(row_index*1))+:1] = result_28[((row_index*4)+(col_index*1))+:1];
    end
  end
  endgenerate
  // transpose end

  // imap begin
  genvar i_31;
  generate
  for (i_31=0; i_31 < 4; i_31 = i_31 + 1) begin : imap
    wire [2-1:0] map_index;
    wire [1:0] map_out_14;

    assign map_index = 2'd3 - i_31[0+:2];
    assign map_out_14 = map_index;


    assign result_res[i_31*2+:2] = map_out_14;
  end
  endgenerate
  // imap end

  // map begin
  genvar i_32;
  generate
  for (i_32=0; i_32 < 4; i_32 = i_32 + 1) begin : map_14
    wire [1:0] map_in_15;
    assign map_in_15 = result_res[i_32*2+:2];
    wire [3:0] map_out_15;
    reg [3:0] result_54 = {1'b0,   1'b0,   1'b0,   1'b0};
    wire  c$f2_case_scrut;
    reg [3:0] cnt_2 = 4'd0;
    wire [3:0] result_55;
    wire [3:0] f2;
    wire  c$s1_case_scrut_1;
    reg [9:0] scanKeypad_$snextCol_s1_0 = 10'd0;
    wire [9:0] c$s1_app_arg_5;
    wire [3:0] result_53;
    assign map_out_15 = result_53;

    // register begin
    always @(posedge CLK or  posedge  c$ds_bindCsr) begin : result_54_register
      if ( c$ds_bindCsr) begin
        result_54 <= {1'b0,   1'b0,   1'b0,   1'b0};
      end else if (1'b1 & (c$f2_case_scrut & (lvl7 == map_in_15))) begin
        result_54 <= lvl8;
      end
    end
    // register end

    assign c$f2_case_scrut = cnt_2 == 4'd9;

    // register begin
    always @(posedge CLK or  posedge  c$ds_bindCsr) begin : cnt_2_register
      if ( c$ds_bindCsr) begin
        cnt_2 <= 4'd0;
      end else begin
        cnt_2 <= result_55;
      end
    end
    // register end

    assign result_55 = c$s1_case_scrut_1 ? 4'd0 : f2;

    assign f2 = c$f2_case_scrut ? 4'd9 : (cnt_2 + 4'd1);

    assign c$s1_case_scrut_1 = scanKeypad_$snextCol_s1_0 == 10'd999;

    // register begin
    always @(posedge CLK or  posedge  c$ds_bindCsr) begin : scanKeypad_$snextCol_s1_0_register
      if ( c$ds_bindCsr) begin
        scanKeypad_$snextCol_s1_0 <= 10'd0;
      end else begin
        scanKeypad_$snextCol_s1_0 <= c$s1_app_arg_5;
      end
    end
    // register end

    assign c$s1_app_arg_5 = c$s1_case_scrut_1 ? 10'd0 : (scanKeypad_$snextCol_s1_0 + 10'd1);

    assign result_53 = result_54;


    assign result_28[i_32*4+:4] = map_out_15;
  end
  endgenerate
  // map end

  // map begin
  genvar i_33;
  generate
  for (i_33=0; i_33 < 4; i_33 = i_33 + 1) begin : map_15
    wire  map_in_16;
    assign map_in_16 = ROWS[i_33*1+:1];
    wire  map_out_16;
    wire [0:0] bv;
    wire  result_56;
    assign map_out_16 = result_56;

    assign bv = (~ map_in_16);

    assign result_56 = bv == 1'b1;


    assign lvl8[i_33*1+:1] = map_out_16;
  end
  endgenerate
  // map end

  assign lvl7 = result_31[1:0];

  assign c$s1_case_scrut_0 = scanKeypad_$snextCol_s1 == 10'd999;

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : scanKeypad_$snextCol_s1_register
    if ( c$ds_bindCsr) begin
      scanKeypad_$snextCol_s1 <= 10'd0;
    end else begin
      scanKeypad_$snextCol_s1 <= c$s1_app_arg_1;
    end
  end
  // register end

  assign c$s1_app_arg_1 = c$s1_case_scrut_0 ? 10'd0 : (scanKeypad_$snextCol_s1 + 10'd1);

  assign c$i_app_arg_0 = (i_3 == 2'd3) ? 2'd0 : (i_3 + 2'd1);

  assign c$vec_7 = (((c$app_arg_14)));

  // map begin
  genvar i_34;
  generate
  for (i_34=0; i_34 < 4; i_34 = i_34 + 1) begin : map_16
    wire [0:0] map_in_17;
    assign map_in_17 = c$vec_7[i_34*1+:1];
    wire  map_out_17;
    assign map_out_17 = map_in_17 == 1'b1;


    assign c$app_arg_13[i_34*1+:1] = map_out_17;
  end
  endgenerate
  // map end

  assign c$din_0 = (1'b1);

  // replaceBit start
  always @(*) begin
    c$app_arg_14 = 4'b0000;
    c$app_arg_14[(wild_2)] = c$din_0;
  end
  // replaceBit end

  assign wild_2 = $signed(c$wild_app_arg_1);

  assign c$wild_app_arg_1 = $unsigned({{(64-2) {1'b0}},i_3});

  // reverse begin
  genvar i_35;
  generate
  for (i_35 = 0; i_35 < 4; i_35 = i_35 + 1) begin : reverse_0
    assign result_29[(4 - 1 - i_35)*1+:1] = c$app_arg_13[i_35*1+:1];
  end
  endgenerate
  // reverse end

  assign result_30 = {result_29,   i_3};

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : i_3_register
    if ( c$ds_bindCsr) begin
      i_3 <= 2'd0;
    end else if (c$s1_case_scrut_0) begin
      i_3 <= c$i_app_arg_0;
    end
  end
  // register end

  assign result_31 = {result_30[5:2],
                      result_30[1:0]};

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : _c$app_arg_register
    if ( c$ds_bindCsr) begin
      \/=_c$app_arg  <= {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        1'b0},
   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else begin
      \/=_c$app_arg  <= result_27[15:0];
    end
  end
  // register end

  wire [3:0] vec_0;
  wire  acc_2_0_2;
  wire  acc_0_6;
  wire  acc_0_7;
  wire  acc_0_8;
  wire  acc_0_9;
  wire  acc_1_0_0;
  wire  acc_1_1_1;
  assign c$case_scrut_1 = acc_2_0_2;

  assign vec_0 = c$app_arg_15;

  assign acc_0_6 = vec_0[3:3];

  assign acc_0_7 = vec_0[2:2];

  assign acc_0_8 = vec_0[1:1];

  assign acc_0_9 = vec_0[0:0];

  assign acc_1_0_0 = acc_0_6 & acc_0_7;



  assign acc_1_1_1 = acc_0_8 & acc_0_9;



  assign acc_2_0_2 = acc_1_0_0 & acc_1_1_1;





  assign c$vec1_3 = result_27[15:0];

  // zipWith start
  genvar i_37;
  generate
  for (i_37 = 0; i_37 < 4; i_37 = i_37 + 1) begin : zipWith_10
    wire [3:0] zipWith_in1_10;
    assign zipWith_in1_10 = c$vec1_3[i_37*4+:4];
    wire [3:0] zipWith_in2_10;
    assign zipWith_in2_10 = \/=_c$app_arg [i_37*4+:4];
    wire  c$n_10;
    wire [3:0] c$app_arg_26;
    wire  result_57;
    assign c$n_10 = result_57;

    // zipWith start
    genvar i_36;

    for (i_36 = 0; i_36 < 4; i_36 = i_36 + 1) begin : zipWith_9
      wire  zipWith_in1_9;
      assign zipWith_in1_9 = zipWith_in1_10[i_36*1+:1];
      wire  zipWith_in2_9;
      assign zipWith_in2_9 = zipWith_in2_10[i_36*1+:1];
      wire  c$n_9;
      wire  c$case_alt_9;
    wire  result_58;
    assign c$n_9 = result_58;

    assign c$case_alt_9 = zipWith_in2_9 ? 1'b0 : 1'b1;

    assign result_58 = zipWith_in1_9 ? zipWith_in2_9 : c$case_alt_9;


      assign c$app_arg_26[i_36*1+:1] = c$n_9;
    end

    // zipWith end

    wire [3:0] vec_1;
    wire  acc_2_0_5;
    wire  acc_0_11;
    wire  acc_0_12;
    wire  acc_0_13;
    wire  acc_0_14;
    wire  acc_1_0_3;
    wire  acc_1_1_4;
    assign result_57 = acc_2_0_5;

    assign vec_1 = c$app_arg_26;

    assign acc_0_11 = vec_1[3:3];

    assign acc_0_12 = vec_1[2:2];

    assign acc_0_13 = vec_1[1:1];

    assign acc_0_14 = vec_1[0:0];

    assign acc_1_0_3 = acc_0_11 & acc_0_12;



    assign acc_1_1_4 = acc_0_13 & acc_0_14;



    assign acc_2_0_5 = acc_1_0_3 & acc_1_1_4;






    assign c$app_arg_15[i_37*1+:1] = c$n_10;
  end
  endgenerate
  // zipWith end

  assign result_32 = c$case_scrut_1 ? 1'b0 : 1'b1;

  assign result_33 = (eta3 == 19'd499999) ? 19'd499999 : (eta3 + 19'd1);

  assign result_34 = result_32 ? 19'd0 : result_33;

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : result_35_register
    if ( c$ds_bindCsr) begin
      result_35 <= {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        1'b0},
   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else if (result_34 == 19'd499999) begin
      result_35 <= result_27[15:0];
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : eta3_register
    if ( c$ds_bindCsr) begin
      eta3 <= 19'd0;
    end else begin
      eta3 <= result_34;
    end
  end
  // register end

  // register begin
  always @(posedge CLK or  posedge  c$ds_bindCsr) begin : keypadEvents1_c$app_arg_register
    if ( c$ds_bindCsr) begin
      keypadEvents1_c$app_arg <= {{1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,   1'b0,   1'b0,   1'b0},   {1'b0,
                                                                        1'b0,
                                                                        1'b0,
                                                                        1'b0},
   {1'b0,   1'b0,   1'b0,   1'b0}};
    end else begin
      keypadEvents1_c$app_arg <= result_35;
    end
  end
  // register end

  // zipWith start
  genvar i_39;
  generate
  for (i_39 = 0; i_39 < 4; i_39 = i_39 + 1) begin : zipWith_12
    wire [3:0] zipWith_in1_12;
    assign zipWith_in1_12 = keypadEvents1_c$app_arg[i_39*4+:4];
    wire [3:0] zipWith_in2_12;
    assign zipWith_in2_12 = result_35[i_39*4+:4];
    wire [7:0] c$n_12;
    // zipWith start
    genvar i_38_3;

    for (i_38_3 = 0; i_38_3 < 4; i_38_3 = i_38_3 + 1) begin : zipWith_11_0
      wire  zipWith_in1_11_0;
      assign zipWith_in1_11_0 = zipWith_in1_12[i_38_3*1+:1];
      wire  zipWith_in2_11_0;
      assign zipWith_in2_11_0 = zipWith_in2_12[i_38_3*1+:1];
      wire [1:0] c$n_15;
      wire [1:0] c$case_alt_10;
        wire [1:0] c$case_alt_11;
        wire [1:0] result_59;
        assign c$n_15 = result_59;

        assign c$case_alt_10 = zipWith_in2_11_0 ? {1'b0,1'bx} : {1'b1,1'd1};

        assign c$case_alt_11 = zipWith_in2_11_0 ? {1'b1,1'd0} : {1'b0,1'bx};

        assign result_59 = zipWith_in1_11_0 ? c$case_alt_10 : c$case_alt_11;


      assign c$n_12[i_38_3*2+:2] = c$n_15;
    end

    // zipWith end
    assign result_36[i_39*8+:8] = c$n_12;
  end
  endgenerate
  // zipWith end

  assign c$vec1_4 = {{4'd1,   4'd2,   4'd3,
                      4'd10},   {4'd4,   4'd5,   4'd6,   4'd11},
                     {4'd7,   4'd8,   4'd9,   4'd12},   {4'd0,
                                                         4'd15,   4'd14,   4'd13}};

  // zipWith start
  genvar i_41;
  generate
  for (i_41 = 0; i_41 < 4; i_41 = i_41 + 1) begin : zipWith_14
    wire [15:0] zipWith_in1_14;
    assign zipWith_in1_14 = c$vec1_4[i_41*16+:16];
    wire [7:0] zipWith_in2_14;
    assign zipWith_in2_14 = result_36[i_41*8+:8];
    wire [19:0] c$n_14;
    // zipWith start
    genvar i_40_4;

    for (i_40_4 = 0; i_40_4 < 4; i_40_4 = i_40_4 + 1) begin : zipWith_13_1
      wire [3:0] zipWith_in1_13_1;
      assign zipWith_in1_13_1 = zipWith_in1_14[i_40_4*4+:4];
      wire [1:0] zipWith_in2_13_1;
      assign zipWith_in2_13_1 = zipWith_in2_14[i_40_4*2+:2];
      wire [4:0] c$n_16;
      wire [4:0] c$case_alt_12;
        wire [4:0] result_60;
        assign c$n_16 = result_60;

        assign c$case_alt_12 = zipWith_in2_13_1[0:0] ? {1'b0,4'bxxxx} : {1'b1,zipWith_in1_13_1};

        assign result_60 = zipWith_in2_13_1[1:1] ? c$case_alt_12 : {1'b0,4'bxxxx};


      assign c$n_14[i_40_4*5+:5] = c$n_16;
    end

    // zipWith end
    assign c$app_arg_16[i_41*20+:20] = c$n_14;
  end
  endgenerate
  // zipWith end

  // map begin
  genvar i_42;
  generate
  for (i_42=0; i_42 < 4; i_42 = i_42 + 1) begin : map_17
    wire [19:0] map_in_18;
    assign map_in_18 = c$app_arg_16[i_42*20+:20];
    wire [4:0] map_out_18;
    wire [19:0] vec_2;
  wire [4:0] acc_2_0_8;
  wire [4:0] acc_0_16;
  wire [4:0] acc_0_17;
  wire [4:0] acc_0_18;
  wire [4:0] acc_0_19;
  wire [4:0] acc_1_0_6;
  wire [4:0] acc_1_1_7;
  assign map_out_18 = acc_2_0_8;

  assign vec_2 = map_in_18;

  assign acc_0_16 = vec_2[19:15];

  assign acc_0_17 = vec_2[14:10];

  assign acc_0_18 = vec_2[9:5];

  assign acc_0_19 = vec_2[4:0];

  wire [4:0] result_61;
  assign acc_1_0_6 = result_61;

  assign result_61 = acc_0_16[4:4] ? acc_0_16 : acc_0_17;



  wire [4:0] result_62;
  assign acc_1_1_7 = result_62;

  assign result_62 = acc_0_18[4:4] ? acc_0_18 : acc_0_19;



  wire [4:0] result_63;
  assign acc_2_0_8 = result_63;

  assign result_63 = acc_1_0_6[4:4] ? acc_1_0_6 : acc_1_1_7;




    assign c$app_arg_17[i_42*5+:5] = map_out_18;
  end
  endgenerate
  // map end

  wire [19:0] vec_3;
  wire [4:0] acc_2_0_11;
  wire [4:0] acc_0_21;
  wire [4:0] acc_0_22;
  wire [4:0] acc_0_23;
  wire [4:0] acc_0_24;
  wire [4:0] acc_1_0_9;
  wire [4:0] acc_1_1_10;
  assign result_37 = acc_2_0_11;

  assign vec_3 = c$app_arg_17;

  assign acc_0_21 = vec_3[19:15];

  assign acc_0_22 = vec_3[14:10];

  assign acc_0_23 = vec_3[9:5];

  assign acc_0_24 = vec_3[4:0];

  wire [4:0] result_64;
  assign acc_1_0_9 = result_64;

  assign result_64 = acc_0_21[4:4] ? acc_0_21 : acc_0_22;



  wire [4:0] result_65;
  assign acc_1_1_10 = result_65;

  assign result_65 = acc_0_23[4:4] ? acc_0_23 : acc_0_24;



  wire [4:0] result_66;
  assign acc_2_0_11 = result_66;

  assign result_66 = acc_1_0_9[4:4] ? acc_1_0_9 : acc_1_1_10;





  assign result_38 = {result_27[19:16],
                      result_37};

  // resetGen on
  // pragma translate_off

  reg  rst;
  localparam reset_period = 30001 + ((1 - 1) * 100000);
  initial begin
    #1     rst =  1 ;
    #reset_period rst =  0 ;
  end
  assign c$ds_bindCsr = rst;
  // pragma translate_on
  // resetGen end

  assign TX = result[16:16];

  assign SS = result[15:4];

  assign COLS = result[3:0];

  assign SS_AN = SS[11:8];

  assign SS_SEG = SS[7:1];

  assign SS_DP = SS[0:0];


endmodule

